#Module: Introductory Programming and Problem Solving
#Coding Challenge 4: Data Structures

#Elizabeth Austin
#SN: 1725049
#Password Encryption and Decryption Program using a substitution cypher tuple



print("This program will encrypt and decrypt user passwords\n")

#substitution cypher tuple
encryptabet=[("a", "m"), ("A", "M"), ("b", "h"), ("B", "H"), ("c", "t"), ("C", "T"),
             ("d", "f"), ("D", "F"), ("e", "g"), ("E", "G"), ("f", "k"), ("F", "K"),
             ("g", "b"), ("G", "B"), ("h", "p"), ("H", "P"), ("i", "j"), ("I", "J"),
             ("j", "w"), ("J", "W"), ("k", "e"), ("K", "E"), ("l", "r"), ("L", "R"),
             ("m", "q"), ("M", "Q"), ("n", "s"), ("N", "S"), ("o", "l"), ("O", "L"),
             ("p", "n"), ("P", "N"), ("q", "i"), ("Q", "I"), ("r", "u"), ("R", "U"),
             ("s", "o"), ("S", "O"), ("t", "x"), ("T", "X"), ("u", "z"), ("U", "Z"),
             ("v", "y"), ("V", "Y"), ("w", "v"), ("W", "V"), ("x", "d"), ("X", "D"),
             ("y", "c"), ("Y", "C"), ("z", "a"), ("Z", "A"), (" ", " ")]

answered=False
while answered != True:
    #variable created for user input to choose whether to encrypt or decrypt their password
    e_or_d=input("Enter (e) to encrypt a password, and (d) to decrypt:\n>")

    #if they choose lower case or upper case e to encrypt
    if e_or_d=="e" or e_or_d=="E":
        answered=True
        password=input("Enter password to encrypt:\n>")

    
        #new variable created, an empty string to create the substituted encrypted password
        encrypted_pass=""

        #for each index in the user inputted password word
        for c in password:
            #iterating through, and checking whether there is a
            #match in the tuple for each index in the password
            for sub in encryptabet:
                #if there is a match within the first index of the tuple
                if c == sub[0]:
                    #add the substitution i.e. the second index from the tuple to the new
                    #encrypted_pass variable to make up the encryption
                    encrypted_pass += sub[1]
        print("Your encrypted password is:", encrypted_pass, "\n")

    #if they choose lower case or upper case d to decrypt
    elif e_or_d=="d" or e_or_d=="D":
        answered=True
        password2=input("Enter password to decrypt:\n>")

        #new variable created, an empty string to create the substituted decrypted password
        decrypted_pass=""

        #for each index in the user inputted password word
        for c in password2:
            #iterating through, checking whether there is a
            #match in the tuple for each index in the password
            for sub in encryptabet:
                #if there is a match within the second index of the tuple
                if c == sub[1]:
                    #add the substitution i.e. the first index from the corresponding
                    #tuple to the new decrypted_pass variable to make up the decryption
                    decrypted_pass += sub[0]
        print("Your decrypted password is:", decrypted_pass, "\n")


